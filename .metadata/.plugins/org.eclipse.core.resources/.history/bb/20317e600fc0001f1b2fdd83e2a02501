package PTRNLOCK;

import java.util.Scanner;
import java.util.HashSet;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt(); // Số test cases

        for (int t = 1; t <= T; t++) {
            int N = sc.nextInt(); // Số mẫu hình cần kiểm tra
            String[] patterns = new String[N];
            
            // Đọc các mẫu hình
            for (int i = 0; i < N; i++) {
                patterns[i] = sc.next();
            }
            
            // Kiểm tra từng mẫu hình
            StringBuilder result = new StringBuilder();
            for (int i = 0; i < N; i++) {
                result.append(isValidPattern(patterns[i]) ? "1" : "0");
            }
            
            System.out.println("#" + t + " " + result.toString());
        }
        sc.close();
    }

    private static boolean isValidPattern(String pattern) {
        if (pattern.length() < 4) return false; // Kiểm tra điều kiện ít nhất 4 điểm
        
        HashSet<Character> used = new HashSet<>();
        for (int i = 0; i < pattern.length(); i++) {
            // Kiểm tra điểm đã được sử dụng chưa
            if (!used.add(pattern.charAt(i))) {
                return false;
            }

            if (i > 0) {
                int curr = pattern.charAt(i) - '0';
                int prev = pattern.charAt(i-1) - '0';
                
                // Kiểm tra tính hợp lệ của đường nối
                if (!isValidConnection(prev, curr, used, pattern.substring(0, i))) {
                    return false;
                }
            }
        }
        return true;
    }

    private static boolean isValidConnection(int prev, int curr, HashSet<Character> used, String patternSoFar) {
        // Chuyển đổi số thành tọa độ
        int px = (prev - 1) / 3;
        int py = (prev - 1) % 3;
        int cx = (curr - 1) / 3;
        int cy = (curr - 1) % 3;
        
        // Kiểm tra điểm giữa nếu có
        if (Math.abs(px - cx) == 2 || Math.abs(py - cy) == 2) {
            int midX = (px + cx) / 2;
            int midY = (py + cy) / 2;
            int midPoint = midX * 3 + midY + 1;
            
            // Nếu có điểm giữa nhưng chưa được sử dụng
            if (!used.contains(Character.forDigit(midPoint, 10))) {
                return false;
            }
        }
        
        return true;
    }
}
